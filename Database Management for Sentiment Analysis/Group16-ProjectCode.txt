/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
CREATE DATABASE Group16;
GO
USE Group16;
GO
--Task 1 to create the tables 
-- Create Locations Table
CREATE TABLE Locations (
    Location_ID INT NOT NULL PRIMARY KEY,
    Location_Name VARCHAR(100) NOT NULL
);

-- Create Platforms Table
CREATE TABLE Platforms (
    Platform_ID INT NOT NULL PRIMARY KEY,
    Platform_Name VARCHAR(50) NOT NULL
);

-- Create Languages Table
CREATE TABLE Languages (
    Language_ID INT NOT NULL PRIMARY KEY,
    Language_Name VARCHAR(50) NOT NULL UNIQUE
);

-- Create Users Table
CREATE TABLE Users (
    User_ID INT NOT NULL PRIMARY KEY,
    Username VARCHAR(50) NOT NULL,
    Age INT CHECK (Age >= 13),
    Gender CHAR(1),
    Location_ID INT,
    FOREIGN KEY (Location_ID) REFERENCES Locations(Location_ID)
);

-- Create Posts Table
CREATE TABLE Posts (
    Post_ID INT NOT NULL PRIMARY KEY,
    User_ID INT NOT NULL,
    Platform_ID INT NOT NULL,
    Post_Content TEXT NOT NULL,
    Language_ID INT,
    Post_Date DATETIME NOT NULL,
    Hashtags TEXT,
    Keywords TEXT,
    FOREIGN KEY (User_ID) REFERENCES Users(User_ID),
    FOREIGN KEY (Platform_ID) REFERENCES Platforms(Platform_ID),
    FOREIGN KEY (Language_ID) REFERENCES Languages(Language_ID)
);

-- Create Hashtags Table
CREATE TABLE Hashtags (
    Hashtag_ID INT NOT NULL PRIMARY KEY,
    Hashtag_Text VARCHAR(100) NOT NULL UNIQUE
);

-- Create Keywords Table
CREATE TABLE Keywords (
    Keyword_ID INT NOT NULL PRIMARY KEY,
    Keyword_Text VARCHAR(100) NOT NULL UNIQUE
);

-- Create Sentiment_Scores Table
CREATE TABLE Sentiment_Scores (
    Score_ID INT NOT NULL PRIMARY KEY,
    Post_ID INT NOT NULL,
    Sentiment_Score DECIMAL(3, 2) NOT NULL CHECK (Sentiment_Score BETWEEN -1.00 AND 1.00),
    FOREIGN KEY (Post_ID) REFERENCES Posts(Post_ID)
);

-- Create Post_Analytics Fact Table
CREATE TABLE Post_Analytics (
    Analytics_ID INT NOT NULL PRIMARY KEY,
    Post_ID INT NOT NULL,
    Likes_Count INT NOT NULL DEFAULT 0,
    Shares_Count INT NOT NULL DEFAULT 0,
    Comments_Count INT NOT NULL DEFAULT 0,
    Views_Count INT NOT NULL DEFAULT 0,
    Engagement_Rate DECIMAL(5, 2) NOT NULL DEFAULT 0,
    Analysis_Date DATETIME NOT NULL,
    FOREIGN KEY (Post_ID) REFERENCES Posts(Post_ID)
);

-- Create Sentiment_Trends Fact Table
CREATE TABLE Sentiment_Trends (
    Trend_ID INT NOT NULL PRIMARY KEY,
    Platform_ID INT NOT NULL,
    Date DATE NOT NULL,
    Avg_Sentiment DECIMAL(3, 2) NOT NULL CHECK (Avg_Sentiment BETWEEN -1.00 AND 1.00),
    Post_Count INT NOT NULL DEFAULT 0,
    Positive_Ratio DECIMAL(5, 2) NOT NULL CHECK (Positive_Ratio BETWEEN 0 AND 100),
    Negative_Ratio DECIMAL(5, 2) NOT NULL CHECK (Negative_Ratio BETWEEN 0 AND 100),
    Neutral_Ratio DECIMAL(5, 2) NOT NULL CHECK (Neutral_Ratio BETWEEN 0 AND 100),
    FOREIGN KEY (Platform_ID) REFERENCES Platforms(Platform_ID)
);

/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/

-- Script to see the tables
SELECT * FROM Locations;
SELECT * FROM Platforms;
SELECT * FROM Languages;
SELECT * FROM Users;
SELECT * FROM Keywords;
SELECT * FROM Hashtags;
SELECT * FROM Posts;
SELECT * FROM Sentiment_Scores;
SELECT * FROM Post_Analytics;
SELECT * FROM Sentiment_Trends;

/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
-- Task 3
-- Insert data into Locations
INSERT INTO Locations VALUES (1, 'Phoenix'), (2, 'San Francisco'), (3, 'London'), 
                             (4, 'Berlin'), (5, 'Tokyo'), (6, 'Hyderabad'), (7, 'Sydney'), 
                             (8, 'Toronto'), (9, 'Dubai'), (10, 'Bengaluru');
SELECT * FROM Locations
/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
-- Insert data into Platforms
INSERT INTO Platforms VALUES (1, 'Twitter'), (2, 'Facebook'), (3, 'Instagram'), 
                             (4, 'LinkedIn'), (5, 'YouTube'), (6,'Snapchat'),(7,'TikTok'),(8,'Reddit'),
							 (9,'Telegram'),(10,'Quora');
SELECT * FROM Platforms
/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
-- Insert data into Languages
INSERT INTO Languages VALUES (1, 'English'), (2, 'Telugu'), (3, 'French'), 
                             (4, 'German'), (5, 'Japanese'), (6, 'Mandarin'), 
                             (7, 'Hindi'), (8, 'Kannada'), (9, 'Portuguese'), 
                             (10, 'Russian');
SELECT * FROM Languages
/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
-- Insert data into Users
INSERT INTO Users VALUES 
(1, 'user1', 25, 'M', 1), (2, 'user2', 30, 'F', 2), 
(3, 'user3', 22, 'M', 3), (4, 'user4', 28, 'F', 4), 
(5, 'user5', 35, 'O', 5), (6, 'user6', 29, 'M', 6), 
(7, 'user7', 31, 'F', 7), (8, 'user8', 26, 'M', 8), 
(9, 'user9', 27, 'F', 9), (10, 'user10', 24, 'O', 10);
SELECT * FROM Users
/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
-- Insert data into Keywords
INSERT INTO Keywords VALUES 
(1, 'AI'), (2, 'Disappointing'), (3, 'DataScience'), 
(4, 'BigData'), (5, 'Chemistry'), (6, '5G'), (7, 'Robotics'), 
(8, 'CloudComputing'), (9, 'Blockchain'), (10, 'Amazing');
SELECT * FROM Keywords
/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
-- Insert data into Hashtags
INSERT INTO Hashtags VALUES 
(1, '#AI'), (2, '#Disappointing'), (3, '#DataScience'), (4, '#BigData'), 
(5, '#Chemistry'), (6, '#5G'), (7, '#Robotics'), (8, '#CloudComputing'), 
(9, '#Blockchain'), (10, '#Amazing');
SELECT * FROM Hashtags
/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
-- Insert data into Posts
INSERT INTO Posts VALUES
(1, 1, 1, 'AI is transforming industries.', 1, '2024-11-01 12:30:21', '#AI', 'AI'),
(2, 2, 2, 'Big data is the future.', 1, '2024-11-02 13:00:57', '#BigData', 'BigData'),
(3, 3, 3, 'Organic chemistry is complicated.', 1, '2009-11-03 14:12:02', '#Chemistry', 'Chemistry'),
(4, 4, 4, 'The quarterly results are quite disappointing.', 1, '2019-07-31 07:05:13' , '#Disappointing' , 'Disappointing'), 
(5, 5, 5, 'Blockchain ensures safe transactions.', 1, '2022-10-12 19:19:12', '#Blockchain', 'Blockchain'),
(6, 6, 6, 'CloudComputing delivers computing resources.', 1, '2019-01-18 01:12:48', '#CloudComputing', 'CloudComputing'),
(7, 7, 7, 'DataScience engineers are cool!', 1, '2012-12-31 12:05:37' , '#DataScience', 'DataScience'),
(8, 8, 8, 'Is 5G harmful?', 1, '2024-09-12 18:07:13', '#5G', '5G'),
(9, 9, 9, 'Its amazing to go out for a run!!', 1, '2007-02-19 21:21:17', '#Amazing', 'Amazing'),
(10, 10, 10, 'How to pursue a career in robotics?', 1, '2021-06-05 15:08:01', '#Robotics', 'Robotics')
;
SELECT * FROM Posts
/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
-- Insert data into Sentiment_Scores
INSERT INTO Sentiment_Scores VALUES
(1, 1, 0.75), (2, 2, 0.90), (3, 3, -0.10), (4,4,-0.8),(5,5,0.56),(6,6,-0.72),(7,7,0.18),(8,8,0.49),(9,9,1),(10,10,-1);
SELECT * FROM Sentiment_Scores
/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
-- Insert data into Post_Analytics
INSERT INTO Post_Analytics VALUES
(1, 1, 100, 25, 50, 200, 12.5, '2019-12-01 12:31:19'),
(2, 2, 150, 30, 60, 250, 15.6, '2023-02-05 03:25:47'),
(3, 3, 200, 50, 80, 300, 20.7, '2016-07-30 20:19:23'),
(4, 4, 120, 20, 40, 180, 10.2, '2024-06-05 15:40:20'),
(5, 5, 300, 100, 150, 400, 25.0, '2020-09-20 09:17:38'),
(6, 6, 250, 60, 90, 350, 22.5, '2024-11-14 17:00:00'),
(7, 7, 400, 150, 200, 500, 30.0, '2008-03-15 18:50:43'),
(8, 8, 180, 40, 70, 220, 12.8, '2022-12-30 19:00:00'),
(9, 9, 220, 80, 110, 330, 18.7, '2019-11-14 20:00:00'),
(10, 10, 500, 200, 300, 600, 35.5, '2017-11-14 04:37:16'),
(11, 1, 120, 35, 60, 250, 14.5, '2022-09-27 05:23:11'),
(12, 2, 140, 25, 55, 230, 13.8, '2015-05-19 08:45:21'),
(13, 3, 190, 45, 75, 280, 19.0, '2018-12-05 02:18:47'),
(14, 4, 130, 30, 50, 200, 11.0, '2022-06-30 19:47:03'),
(15, 5, 310, 105, 160, 420, 26.0, '2024-07-15 07:23:33'),
(16, 6, 240, 55, 85, 340, 21.8, '2016-09-14 09:35:10'),
(17, 7, 390, 140, 190, 490, 28.5, '2020-12-15 03:30:45'),
(18, 8, 175, 35, 65, 215, 12.5, '2018-04-03 06:10:17'),
(19, 9, 210, 75, 105, 315, 17.8, '2020-12-15 03:30:45'),
(20, 10, 520, 210, 320, 610, 36.0, '2023-09-12 16:45:55'),
(21, 1, 130, 40, 70, 260, 15.2, '2015-07-29 12:40:55'),
(22, 2, 160, 35, 65, 240, 14.5, '2019-09-21 15:45:55'),
(23, 3, 180, 50, 85, 290, 18.5, '2020-08-11 08:12:01'),
(25, 5, 315, 110, 170, 430, 27.0, '2024-11-16 16:00:00'),
(26, 6, 230, 50, 80, 330, 21.0, '2022-02-28 20:12:39'),
(27, 7, 410, 160, 210, 510, 29.0, '2020-04-15 22:14:37'),
(28, 8, 165, 30, 60, 205, 11.8, '2020-11-19 19:10:04'),
(29, 9, 225, 85, 115, 325, 19.0, '2023-07-04 17:35:47'),
(30, 10, 510, 195, 305, 620, 37.2, '2017-08-15 13:40:55'),
(31, 1, 140, 45, 75, 270, 16.0, '2020-10-17 16:00:31'),
(32, 2, 150, 40, 70, 250, 15.0, '2017-11-22 22:59:45'),
(33, 3, 175, 55, 90, 300, 17.5, '2022-02-28 20:12:39'),
(34, 4, 135, 35, 55, 210, 12.0, '2024-03-15 17:30:027'),
(35, 5, 320, 115, 175, 440, 28.0, '2018-12-04 05:06:43'),
(36, 6, 220, 45, 75, 320, 20.0, '2024-11-17 17:00:00'),
(37, 7, 405, 155, 205, 520, 29.5, '2016-03-30 17:13:08'),
(38, 8, 170, 35, 65, 215, 12.2, '2019-01-15 02:34:57'),
(39, 9, 220, 80, 110, 335, 18.2, '2023-05-20 09:55:27'),
(40, 10, 515, 200, 310, 630, 36.5, '2018-12-05 02:18:47'),
(41, 1, 120, 35, 65, 240, 14.5, '2015-12-26 12:15:35'),
(42, 2, 145, 30, 60, 220, 13.5, '2020-10-17 16:00:31'),
(43, 3, 170, 50, 85, 280, 18.0, '2023-04-10 21:45:55'),
(44, 4, 125, 25, 45, 190, 10.5, '2019-07-11 09:31:07'),
(45, 5, 310, 105, 165, 420, 26.0, '2021-01-01 11:11:11');
;
SELECT * FROM Post_Analytics

/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
-- Insert data into Sentiment_Trends
INSERT INTO Sentiment_Trends VALUES
(1, 1, '2017-01-18', 0.65, 200, 60.0, 20.0, 20.0),
(2, 2, '2024-01-21', 0.70, 180, 65.0, 15.0, 20.0),
(3, 3, '2016-07-25', 0.60, 210, 55.0, 25.0, 20.0),
(4, 4, '2019-10-31', 0.50, 220, 50.0, 30.0, 20.0),
(5, 5, '2021-02-11', 0.75, 190, 70.0, 10.0, 20.0),
(6, 6, '2023-07-04', 0.65, 200, 65.0, 20.0, 15.0),
(7, 7, '2024-01-21', 0.55, 210, 50.0, 25.0, 25.0),
(8, 8, '2024-11-08', 0.40, 230, 45.0, 35.0, 20.0),
(9, 9, '2015-05-19', 0.80, 240, 75.0, 10.0, 15.0),
(10, 10, '2019-03-23', 0.45, 250, 40.0, 30.0, 30.0),
(11, 1, '2021-01-01', 0.62, 205, 58.0, 22.0, 20.0),
(12, 2, '2020-10-17', 0.72, 195, 68.0, 12.0, 20.0),
(13, 3, '2015-02-27', 0.58, 215, 53.0, 27.0, 20.0),
(14, 4, '2017-11-22', 0.48, 225, 48.0, 32.0, 20.0),
(15, 5, '2016-09-14', 0.78, 185, 73.0, 8.0, 19.0),
(16, 6, '2024-03-15', 0.67, 190, 60.0, 18.0, 15.0),
(17, 7, '2017-09-20', 0.52, 205, 47.0, 30.0, 23.0),
(18, 8, '2020-07-30', 0.42, 230, 42.0, 35.0, 23.0),
(19, 9, '2022-06-05', 0.85, 235, 77.0, 8.0, 15.0),
(20, 10, '2015-03-31', 0.49, 245, 45.0, 30.0, 25.0),
(21, 1, '2021-11-21', 0.65, 210, 58.0, 20.0, 22.0),
(22, 2, '2020-12-17', 0.75, 200, 68.0, 10.0, 22.0),
(23, 3, '2017-05-27', 0.63, 215, 55.0, 25.0, 20.0),
(24, 4, '2015-07-29', 0.52, 220, 50.0, 30.0, 22.0),
(25, 5, '2024-09-14', 0.77, 180, 70.0, 8.0, 18.0),
(26, 6, '2017-11-19', 0.66, 190, 62.0, 18.0, 14.0),
(27, 7, '2022-09-20', 0.53, 210, 49.0, 29.0, 24.0),
(28, 8, '2016-04-03', 0.44, 225, 44.0, 35.0, 24.0),
(29, 9, '2018-01-29', 0.88, 235, 78.0, 7.0, 14.0),
(30, 10, '2024-11-30', 0.46, 240, 43.0, 29.0, 26.0),
(31, 1, '2015-08-09', 0.68, 215, 60.0, 22.0, 23.0),
(32, 2, '2023-12-27', 0.73, 205, 69.0, 11.0, 23.0)
SELECT * FROM Sentiment_Trends
;
GO

/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
--Task 4
--Query for View 1, Positive Sentiment Posts by Platform, Explanation: This view lists posts with positive sentiment scores (Sentiment_Score > 0.5) for each platform.
CREATE VIEW Positive_Posts_By_Platform AS
SELECT 
    ps.Post_ID,
    p.Platform_Name,
    ps.Post_Content,
    ss.Sentiment_Score
FROM 
    Posts ps
JOIN 
    Platforms p ON ps.Platform_ID = p.Platform_ID
JOIN 
    Sentiment_Scores ss ON ps.Post_ID = ss.Post_ID
WHERE 
    ss.Sentiment_Score > 0.5; -- Restricting to positive sentiment
GO
SELECT * FROM Positive_Posts_By_Platform;

GO
/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
--Query for View 2, Active Users with High Engagement, Explanation: This view identifies users whose posts have high engagement rates (Engagement_Rate > 10.0)
CREATE VIEW Active_Users_With_Engagement AS
SELECT 
    u.Username,
    SUM(pa.Likes_Count) AS Total_Likes,
    SUM(pa.Shares_Count) AS Total_Shares,
    SUM(pa.Comments_Count) AS Total_Comments
FROM 
    Users u
JOIN 
    Posts ps ON u.User_ID = ps.User_ID
JOIN 
    Post_Analytics pa ON ps.Post_ID = pa.Post_ID
WHERE 
    pa.Engagement_Rate > 10.0 -- Restricting to high engagement posts
GROUP BY 
    u.Username;
GO
SELECT * FROM Active_Users_With_Engagement;
GO
/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/

--Query for View 3, Active_User_Insights, Explanation:This view provides insights into user activity by showing their total posts, average sentiment score, and maximum views on any post.
CREATE VIEW Active_User_Insights AS
SELECT 
    u.Username,
    l.Location_Name,
    COUNT(p.Post_ID) AS Total_Posts,
    AVG(ss.Sentiment_Score) AS Avg_Sentiment,
    MAX(pa.Views_Count) AS Max_Views
FROM 
    Users u
JOIN 
    Posts p ON u.User_ID = p.User_ID
JOIN 
    Locations l ON u.Location_ID = l.Location_ID
JOIN 
    Sentiment_Scores ss ON p.Post_ID = ss.Post_ID
JOIN 
    Post_Analytics pa ON p.Post_ID = pa.Post_ID
WHERE 
    p.Post_Date >= DATEADD(YEAR, -1, GETDATE())
GROUP BY 
    u.Username, l.Location_Name;
GO
SELECT * FROM Active_User_Insights
GO


/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
--Task 5

-- Creating an audit table for the Hashtags table, including triggers INSERT, UPDATE, and DELETE operations, as well as the test script to verify functionality.
-- Step 1: Create the Hashtags Table
-- Drop the Hashtags table if it already exists
-- Drop Hashtags_Audit table if it exists
IF OBJECT_ID('Hashtags_Audit', 'U') IS NOT NULL
    DROP TABLE Hashtags_Audit;
GO

-- Drop Hashtags table if it exists
IF OBJECT_ID('Hashtags', 'U') IS NOT NULL
    DROP TABLE Hashtags;
GO
-- Step 2: Create the Hashtags Table
-- Create the Hashtags table
CREATE TABLE Hashtags (
    Hashtag_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY, -- Auto-incrementing ID
    Hashtag_Text NVARCHAR(100) NOT NULL UNIQUE        -- Unique hashtag text
);
GO
-- Step 3: Create the Hashtags_Audit Table
-- Create the Hashtags_Audit table
CREATE TABLE Hashtags_Audit (
    Audit_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,      -- Unique identifier for each audit entry
    Hashtag_ID INT NOT NULL,                              -- Reference to the original Hashtag_ID
    Operation_Type NVARCHAR(10) NOT NULL,                 -- Type of operation: 'INSERT', 'UPDATE', 'DELETE'
    Hashtag_Text NVARCHAR(100),                           -- The hashtag text being audited
    Change_Timestamp DATETIME DEFAULT GETDATE()           -- Timestamp of the operation
);
GO
--Step 4: Create Triggers for the Hashtags Table
--Trigger for INSERT Operations
CREATE TRIGGER trg_Hashtags_Insert
ON Hashtags
AFTER INSERT
AS
BEGIN
    INSERT INTO Hashtags_Audit (Hashtag_ID, Operation_Type, Hashtag_Text, Change_Timestamp)
    SELECT 
        inserted.Hashtag_ID, 
        'INSERT', 
        inserted.Hashtag_Text, 
        GETDATE()
    FROM 
        inserted;
END;
GO


--Step 1: Drop the Tables if They Exist
-- Drop Hashtags_Audit table if it exists
IF OBJECT_ID('Hashtags_Audit', 'U') IS NOT NULL
    DROP TABLE Hashtags_Audit;
GO

-- Drop Hashtags table if it exists
IF OBJECT_ID('Hashtags', 'U') IS NOT NULL
    DROP TABLE Hashtags;
GO

--Step 2: Create the Hashtags Table

-- Create the Hashtags table
CREATE TABLE Hashtags (
    Hashtag_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY, -- Auto-incrementing ID
    Hashtag_Text NVARCHAR(100) NOT NULL UNIQUE        -- Unique hashtag text
);
GO

--Step 3: Create the Hashtags_Audit Table
-- Create the Hashtags_Audit table
CREATE TABLE Hashtags_Audit (
    Audit_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,      -- Unique identifier for each audit entry
    Hashtag_ID INT NOT NULL,                              -- Reference to the original Hashtag_ID
    Operation_Type NVARCHAR(10) NOT NULL,                 -- Type of operation: 'INSERT', 'UPDATE', 'DELETE'
    Hashtag_Text NVARCHAR(100),                           -- The hashtag text being audited
    Change_Timestamp DATETIME DEFAULT GETDATE()           -- Timestamp of the operation
);
GO
--Step 4: Create Triggers for the Hashtags Table
--Trigger for INSERT Operations

CREATE TRIGGER trg_Hashtags_Insert
ON Hashtags
AFTER INSERT
AS
BEGIN
    INSERT INTO Hashtags_Audit (Hashtag_ID, Operation_Type, Hashtag_Text, Change_Timestamp)
    SELECT 
        inserted.Hashtag_ID, 
        'INSERT', 
        inserted.Hashtag_Text, 
        GETDATE()
    FROM 
        inserted;
END;
GO
--Trigger for UPDATE Operations
CREATE TRIGGER trg_Hashtags_Update
ON Hashtags
AFTER UPDATE
AS
BEGIN
    INSERT INTO Hashtags_Audit (Hashtag_ID, Operation_Type, Hashtag_Text, Change_Timestamp)
    SELECT 
        inserted.Hashtag_ID, 
        'UPDATE', 
        inserted.Hashtag_Text, 
        GETDATE()
    FROM 
        inserted;
END;
GO

--Trigger for DELETE Operations
CREATE TRIGGER trg_Hashtags_Delete
ON Hashtags
AFTER DELETE
AS
BEGIN
    INSERT INTO Hashtags_Audit (Hashtag_ID, Operation_Type, Hashtag_Text, Change_Timestamp)
    SELECT 
        deleted.Hashtag_ID, 
        'DELETE', 
        deleted.Hashtag_Text, 
        GETDATE()
    FROM 
        deleted;
END;
GO
--Step 5: Test the Triggers
--Insert Test Data into the Hashtags Table
-- Insert test data into Hashtags
INSERT INTO Hashtags (Hashtag_Text) VALUES 
('#AI'), 
('#BigData'), 
('#CloudComputing');
GO

--Update Test Data in the Hashtags Table
-- Update a row in Hashtags
UPDATE Hashtags
SET Hashtag_Text = '#ArtificialIntelligence'
WHERE Hashtag_ID = 1;
GO

--Delete Test Data from the Hashtags Table
-- Delete a row from Hashtags
DELETE FROM Hashtags
WHERE Hashtag_ID = 2;
GO

--Query the Hashtags_Audit table to verify the audit trail:
SELECT * FROM Hashtags_Audit;
GO

/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
-- TASK 6
--1. Stored Procedure
--Purpose: A stored procedure to fetch all hashtags with a specified keyword in the Hashtag_Text.

--Create Stored Procedure:
-- Drop the stored procedure if it exists
IF OBJECT_ID('GetHashtagsByKeyword', 'P') IS NOT NULL
    DROP PROCEDURE GetHashtagsByKeyword;
GO

-- Create the stored procedure
CREATE PROCEDURE GetHashtagsByKeyword
    @Keyword NVARCHAR(50)
AS
BEGIN
    SELECT Hashtag_ID, Hashtag_Text
    FROM Hashtags
    WHERE Hashtag_Text LIKE '%' + @Keyword + '%';
END;
GO

-- Example 1: Fetch hashtags containing 'AI'
EXEC GetHashtagsByKeyword @Keyword = 'AI';


-- Drop the stored procedure
DROP PROCEDURE GetHashtagsByKeyword;
GO

-- 2. User Defined Function (UDF)
-- Purpose: A UDF to count the number of words in a given text.

--Create UDF
-- Drop the function if it exists
IF OBJECT_ID('CalculateEngagementRate', 'FN') IS NOT NULL
    DROP FUNCTION CalculateEngagementRate;
GO

-- Create the function
CREATE FUNCTION CalculateEngagementRate
    (@Likes INT, @Shares INT, @Views INT)
RETURNS DECIMAL(5, 2)
AS
BEGIN
    RETURN CASE 
        WHEN @Views = 0 THEN 0.00
        ELSE CAST((@Likes + @Shares) AS DECIMAL(5, 2)) / @Views * 100
    END;
END;
GO


-- Example in combination with Post_Analytics table
SELECT Post_ID, 
       dbo.CalculateEngagementRate(Likes_Count, Shares_Count, Views_Count) AS EngagementRate
FROM Post_Analytics;

-- Drop the function
DROP FUNCTION CalculateEngagementRate;
GO

/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/
--Task 7
-- Declare variables to hold data
DECLARE @Post_ID INT, @Sentiment_Score DECIMAL(3, 2);

-- Declare the cursor
DECLARE MyCursor CURSOR FOR
SELECT Post_ID, Sentiment_Score 
FROM Sentiment_Scores
WHERE Sentiment_Score <> 0; -- Only rows with a non-zero sentiment score

-- Open the cursor
OPEN MyCursor;

-- Fetch the first row
FETCH NEXT FROM MyCursor INTO @Post_ID, @Sentiment_Score;

-- Loop through each row
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Print the fetched data (or apply business logic)
    PRINT 'Post ID: ' + CAST(@Post_ID AS VARCHAR) + ', Sentiment Score: ' + CAST(@Sentiment_Score AS VARCHAR);

    -- Fetch the next row
    FETCH NEXT FROM MyCursor INTO @Post_ID, @Sentiment_Score;
END;

-- Close and deallocate the cursor
CLOSE MyCursor;
DEALLOCATE MyCursor;

/*
** Author: Group 16 (Jahnavi Lasyapriya Vavilala, Sruthi Keerthana Nuttakki)
** Course: IFT/530
** SQL Server Version: Microsoft SQL Server 2012 (SP1) 
** History
** Date Created    Comments
** 12/01/2024      
*/

--Drop Cursor Script
-- Close and deallocate cursor if it exists
IF CURSOR_STATUS('global', 'SentimentCursor') >= 0
BEGIN
    CLOSE SentimentCursor;
    DEALLOCATE SentimentCursor;
END;


